/*!
 *  \file
 *  \brief Описывает парсер ключевого слова "macro".
 *
 *  Из - за достаточно объемной обработки ключевого слова \a macro,
 *  был создан класс для его разбора
 */

#ifndef MACROKEYWORDPARSER_H
#define MACROKEYWORDPARSER_H

#include "database.h"
#include "console.h"
#include <QString>
#include <QStringList>
#include <QRegularExpression>

/*!
 * \brief Класс Library служит для разбора, обработки ключевого слова \a macro.
 *
 *  В данном классе помимо разбора и обработки \a macro, в нём также ищутся некоторые ошибки.
 *  Для удобства в классе содержатся указатели на <b>Database</b> и <b>MacroConsole</b>. Первый
 *  нужен здесь, чтобы сразу выводить ошибку в консоль, а не возвращать её код / имя. Второй сделан
 *  указателем только чтобы не копировать базу данных, которая является вектором.
 */

class MacroKeywordParser
{
    MacroConsole *console; ///< Консоль для вывода ошибок, если такие появятся.
    Database *database;    ///< База данных, в которую будет добавлена информация, если \a macro присутствет в строке.
public:
    MacroKeywordParser() = delete; ///< Конструктор по умолчанию удалён для избежания создания объектов без передачи в них базы данных и консоли.

    /*!
     * \brief Конструктор, устанавливающий console = _console, а database = _database.
     *
     * \param[in] _console Консоль для вывода.
     * \param[in] _database База данных для сохранения / извлечения информации.
     *
     * \warning Проверки на Q_NULLPTR не производится.
     */

    MacroKeywordParser(MacroConsole *_console, Database *_database) : console(_console), database(_database) { }

    /*!
     * \brief Находит ключевое слово <b><i> macro </i></b> и добавляет информацию о нём в базу данных
     *
     * \param[in] line Строка, которая будет подвергнута разбору.
     * \param[in] currLibIndex Индекс вхождения ключевого слова \a macro.
     * \return <ul>
     *              <li> 0 - <b><i> macro </i></b> не найдено
     *              <li> 1 - <b><i> macro </i></b> найдено
     *              <li> 2 - произошла ошибка </li>
     *         </ul>
     *
     *  Данный метод производит разбор строки, содержащей ключ. слово "macro"
     *
     *  Алгоритм работы:
     *
     *          1) Поиск в строке line ключевого слова "macro".
     *          2) Если "macro" не найдено, то выйти с кодом 0.
     *          3) Если "macro" найдено, то
     *              3.1) Извлечь имя макроса (см. метод extractMacroName).
     *              3.2) Проверить, не было ли метки с таким именем в текущей библиотеке раньше (см. метод compareWithOthers).
     *                  3.2.1) Если метка с таким именем была, выйти с кодом 2.
     *              3.3) Создать в базе данных в текущей библиотеке новую метку и заполнить поле имени метки найденным значением.
     *              3.4) Извлечь параметры макроопредеделения из строки line (см. метод extractMacroParam).
     *                  3.4.1) Если определение параметров некорректно - выйти с кодом 2.
     *              3.5) Проверить, нет ли в списке параметров пустых строк (если параметр определен как &par_n_1, &, &par_n_2...)
     *                  3.5.1) Если есть - выйти с кодом 2.
     *              3.6) Добавить список параметров в последнюю запись текущей библиотеки.
     */

    quint16 parseMacroKeyword(const QString& line, Database::size_type currLibIndex);

private:

    /*!
     * \brief Извлекает параметры из строки, содержащей <b>macro</b>.
     *
     *  Пробегает по строке за ключевым словом <b>macro</b> и вытаскивает параметры, заполняя ими QStringList.
     *  При нахождении некорректного определения параметра прекращает цикл обработки и ставит \a correctSign в <b>false</b>.
     *  В этом случае, возвращаемое значение функции неопределено и пользоваться им не рекомендуется.
     *  Если всё прошло удачно, то \a correctSign будет выставлен в <b>true</b> и функция вернет список параметров.
     *
     * \warning Ошибки при некорректном определении параметров будут выведены здесь, а не в вызывющей функции.
     * \param[in]  macroIndex  Индекс вхождения ключ. слова <b>macro</b>.
     * \param[in]  line        Строка, в которой будет проихводится поиск.
     * \param[out] correctSign Признак корректного определения параметров.
     * \return Список параметров.
     */

    QStringList extractMacroParam(int macroIndex, const QString& line, bool& correctSign);

    /*!
     * \brief Извлекает из строки с ключевым словом <b>macro</b> имя метки.
     *
     *  Пробегает от начала строки до ':' (если нет - то, до вхождения <b> macro </b>) и извлекает имя макроса посимвольно.
     *  Если встретился пробельный символ до ':' или метка оказалась пустой - \a correctSign заполняется <b> true </b>. Если
     *  \a correctSign вернулся во значением <b> false </b>, то возвращаемых QString не определен и пользоваться им не рекомендуется.
     *
     * \warning Ошибки при некорректном определении параметров будут выведены здесь, а не в вызывющей функции.
     * \param[in]  macroIndex - индекс ключевого слова <b>macro</b> в строке <b>line</b>.
     * \param[in]  line - строка, из которой извлекается имя макроопределения.
     * \param[out] correctSign - Признак корректного извлечения. (true - успешно извлечено / false - произошла ошибка).
     * \return Имя метки.
     */

    QString extractMacroName(int macroIndex, const QString& line, bool &correctSign);

    /*!
     * \brief Метод, определяющий было ли уже макроопределение с именем macroLabel в данной библиотеке
     *
     *  Данный метод перебирает все макроопределения библиотеки с индексом \a currLibIndex и сравнивает их
     *  имена с \a macroLabel и, при совпадении, возвращает true. Иначе будет возвращен false.
     *
     * \param[in] macroLabel Имя макроопределения, которое будет сравниваться с остальными макро в данной библиотеке
     * \param[in] currLibIndex Индекс библиотеки для просмотра
     * \return <ul>
     *              <li> true - метка macroLabel уже существет в библиотеке c индексом currLibIndex </li>
     *              <li> false - метка macroLabel не найдена в библиотеке с индексом currLibIndex </li>
     *         </ul>
     */

    bool compareWithOthers(const QString &macroLabel, Database::size_type currLibIndex);
};

#endif
