;**************Макросы*************
;#ЛОГОТИП
logout:	macro	&logo,&llog
	clear	x
$LG:	ldb	a,&logo[x]
	wd	#0
	incm	x,#&llog
	jlt	$LG
	mend
	
;#ВЫВОД СТРОКИ
view:	macro	&txt,&ltxt
	ld	x,#&txt
	ld	r9,#&ltxt
	clear	a
	addr	r9,x
$ViLoop:	+ldb	a,0[x]
	wd	#0
	incr	x,r9
	jlt	$ViLoop
	mend
			
;#ВЫВОД МНОГОЗНАЧНОГО ЧИСЛА
NumPrint:	macro	
;Алгоритм вывода
	ld	r3, #-1	;r3=-1
	push	r3	;поместить в стек -1. -1 будет служить признаком, выведены все числа.
	compr	a, r0	;сравнить текущее число с 0, положительное или отрицательное
	jlt	$minus	;если число в регистре А - отрицательное, надо вывести знак минуса, а само число сделать положительным, чтобы можно было получить его цифры - переходим на inverseSign
	mov	r2, a	;присвоить значение регистра А регистру r2 для дальнейших операций
$plus:	ld	r3, #10	;R3=10
	divr	r2, r3	;R2=R2 div R3
	mulr	r3, r2	;R3=R2*R3
	subr	a, r3	;A=A-R3 - в A сохраненяется последняя цифра числа
	add	a, #48	;A=А+48 в A сохраняется код цифры
	push	a	;код цифры в стек
	compr	r2, r0	;сравнить R2 и R0
	jeq	$startPrint	;если R2=0, значит, что в стеке все цифры числа, но в обратном порядке). Переход к выводу
	mov	a, r2	;A:=R2
	jmp	$plus	;переход к началу цикла

;вывод кодов цифр из стека
$startPrint:	ld	r3, #-1	;-1 - признак того, что все цифры числа вытолкнуты из стека
$nextD:	pop	a	;вытолкнуть из стека 1 байт
	compr	a, r3	;текущее число <> -1?
	jeq	$returnNP	;A равен -1, заканчиваем вывод
	wd	#0	;вывод символа, код которого лежит в регистре A
	jmp	$nextD	;выведены еще не все цифры. Возвращаемся в начало цикла.

$returnNP:	
	ret		;возврат из подпрограммы

;инвертировать знак числа, хранящегося в a, а также вывести символ минуса '-'	
$minus:	clear	r2	; обнулить r2
	subr	r2, a	; r2=r2-a, a - отрицательное число, минус на минус - плюс, в r2 теперь положительное число
	ld	a, #45	; а=45 код символа '-'
	wd	#0	; вывести минус
	mov	a, r2	; а:=r2 сохранить положительное число в регистр а
	jmp	$plus	; переход на positive
	mend
	
;#ВЫВОД МАССИВА
mView:	macro	
$mloop:	+ld	a,0[x]
	+call	np
	ld	a,#32
	wd	#0
	addr	x,r4
	compr	x,r7
	jlt	$mloop
	mend
	

;#ПОИСК ЭЛЕМЕНТОВ	
ppsearch:	macro	&mass
	clear	x	;обнулисть регистр х для работы со следующим массивом
$Search:	+ld	a,mass[x]	;загрузка нового значения из массива чисел
	compr	a,r5	;сравнение с 1 границей, значение которой хранится в r5
	jlt	$Next	;если элемент меньше первой границы, переход к след элементу
	compr	a,r0	;определить положительный ли элемент. , r0 хранит значение 0
	jlt	$next	;Если 0>=, то переход к след эл-ту
	jeq	$next
	compr	a,r6	;сравнить с r6, в котором хранится значение второй границы
	jgt	$Next	;элемент больше границы - перейти к след эл-ту
	incr	r11,r11	;если все сравнения были пройдены, то число удовлетворяет условию, счетчик результата r11++, т.к. нет дальнейших условий, на сравнение можно внимание не обращать. 

$Next:	addr	x,r4	;переход к загрузке следующего элемента, к регистру х прибавляется значение регистра r4, для перехода сразу на 4 байта 
	compr	x,r7	;сравнение текущего адреса просматриваемого элемента (регистр х) с размером массива, который записан в r7
	jlt	$Search	;если х>=r7, значит массив уже полностью просмотрен, если нет, то продолжаем поиск
	mend		
			
				
